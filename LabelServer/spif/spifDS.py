#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sun Sep  2 16:41:19 2018 by generateDS.py version 2.29.24.
# Python 2.7.5 (default, Jul 13 2018, 13:06:57)  [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]
#
# Command line options:
#   ('-f', '')
#   ('-o', 'spifDS.py')
#
# Command line arguments:
#   xmlspif.xsd
#
# Command line:
#   /usr/bin/generateDS.py -f -o "spifDS.py" xmlspif.xsd
#
# Current working directory (os.getcwd()):
#   spif
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class applied(object):
    ENCRYPT='encrypt'
    DECRYPT='decrypt'
    BOTH='both'


class colorW3C(object):
    AQUA='aqua'
    BLACK='black'
    BLUE='blue'
    FUSCHIA='fuschia'
    GRAY='gray'
    GREEN='green'
    LIME='lime'
    MAROON='maroon'
    NAVY='navy'
    OLIVE='olive'
    PURPLE='purple'
    RED='red'
    SILVER='silver'
    TEAL='teal'
    WHITE='white'
    YELLOW='yellow'


class enumType(object):
    RESTRICTIVE='restrictive'
    PERMISSIVE='permissive'


class markingCode(object):
    PAGE_TOP='pageTop'
    PAGE_BOTTOM='pageBottom'
    PAGE_TOP_BOTTOM='pageTopBottom'
    DOCUMENT_START='documentStart'
    DOCUMENT_END='documentEnd'
    NO_NAME_DISPLAY='noNameDisplay'
    NO_MARKING_DISPLAY='noMarkingDisplay'
    SUPPRESS_CLASS_NAME='suppressClassName'


class operation(object):
    ONLY_ONE='onlyOne'
    ONE_OR_MORE='oneOrMore'
    ALL='all'


class qualifierCode(object):
    PREFIX='prefix'
    SUFFIX='suffix'
    SEPARATOR='separator'


class tag7Encoding(object):
    BIT_SET_ATTRIBUTES='bitSetAttributes'
    SECURITY_ATTRIBUTES='securityAttributes'


class tagType(object):
    NOT_APPLICABLE='notApplicable'
    RESTRICTIVE='restrictive'
    ENUMERATED='enumerated'
    PERMISSIVE='permissive'
    TAG_TYPE_7='tagType7'


class userInput(object):
    STRING='string'
    INTEGER='integer'
    DATE='date'


class version(object):
    _1_0='1.0'


class optionalCategoryData(GeneratedsSuper):
    """Categories associated with specific classification or category."""
    subclass = None
    superclass = None
    def __init__(self, tagSetRef=None, tagType=None, enumType=None, lacv=None, all=None):
        self.original_tagname_ = None
        self.tagSetRef = _cast(None, tagSetRef)
        self.tagType = _cast(None, tagType)
        self.enumType = _cast(None, enumType)
        self.lacv = _cast(None, lacv)
        self.all = _cast(bool, all)
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, optionalCategoryData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if optionalCategoryData.subclass:
            return optionalCategoryData.subclass(*args_, **kwargs_)
        else:
            return optionalCategoryData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tagSetRef(self): return self.tagSetRef
    def set_tagSetRef(self, tagSetRef): self.tagSetRef = tagSetRef
    def get_tagType(self): return self.tagType
    def set_tagType(self, tagType): self.tagType = tagType
    def get_enumType(self): return self.enumType
    def set_enumType(self, enumType): self.enumType = enumType
    def get_lacv(self): return self.lacv
    def set_lacv(self, lacv): self.lacv = lacv
    def get_all(self): return self.all
    def set_all(self, all): self.all = all
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_tagSetName(self, value):
        # Validate type tagSetName, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 256:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tagSetName' % {"value" : value.encode("utf-8")} )
    def validate_tagType(self, value):
        # Validate type tagType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['notApplicable', 'restrictive', 'enumerated', 'permissive', 'tagType7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tagType' % {"value" : value.encode("utf-8")} )
    def validate_enumType(self, value):
        # Validate type enumType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['restrictive', 'permissive']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on enumType' % {"value" : value.encode("utf-8")} )
    def validate_lacv(self, value):
        # Validate type lacv, a restriction on None.
        pass
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='optionalCategoryData', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('optionalCategoryData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='optionalCategoryData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='optionalCategoryData', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='optionalCategoryData'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.tagSetRef is not None and 'tagSetRef' not in already_processed:
            already_processed.add('tagSetRef')
            outfile.write(' tagSetRef=%s' % (quote_attrib(self.tagSetRef), ))
        if self.tagType is not None and 'tagType' not in already_processed:
            already_processed.add('tagType')
            outfile.write(' tagType=%s' % (quote_attrib(self.tagType), ))
        if self.enumType is not None and 'enumType' not in already_processed:
            already_processed.add('enumType')
            outfile.write(' enumType=%s' % (quote_attrib(self.enumType), ))
        if self.lacv is not None and 'lacv' not in already_processed:
            already_processed.add('lacv')
            outfile.write(' lacv=%s' % (quote_attrib(self.lacv), ))
        if self.all is not None and 'all' not in already_processed:
            already_processed.add('all')
            outfile.write(' all="%s"' % self.gds_format_boolean(self.all, input_name='all'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='optionalCategoryData', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('tagSetRef', node)
        if value is not None and 'tagSetRef' not in already_processed:
            already_processed.add('tagSetRef')
            self.tagSetRef = value
            self.validate_tagSetName(self.tagSetRef)    # validate type tagSetName
        value = find_attr_value_('tagType', node)
        if value is not None and 'tagType' not in already_processed:
            already_processed.add('tagType')
            self.tagType = value
            self.validate_tagType(self.tagType)    # validate type tagType
        value = find_attr_value_('enumType', node)
        if value is not None and 'enumType' not in already_processed:
            already_processed.add('enumType')
            self.enumType = value
            self.validate_enumType(self.enumType)    # validate type enumType
        value = find_attr_value_('lacv', node)
        if value is not None and 'lacv' not in already_processed:
            already_processed.add('lacv')
            self.lacv = value
            self.validate_lacv(self.lacv)    # validate type lacv
        value = find_attr_value_('all', node)
        if value is not None and 'all' not in already_processed:
            already_processed.add('all')
            if value in ('true', '1'):
                self.all = True
            elif value in ('false', '0'):
                self.all = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class optionalCategoryData


class optionalCategoryGroup(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, operation=None, categoryGroup=None):
        self.original_tagname_ = None
        self.operation = _cast(None, operation)
        if categoryGroup is None:
            self.categoryGroup = []
        else:
            self.categoryGroup = categoryGroup
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, optionalCategoryGroup)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if optionalCategoryGroup.subclass:
            return optionalCategoryGroup.subclass(*args_, **kwargs_)
        else:
            return optionalCategoryGroup(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_categoryGroup(self): return self.categoryGroup
    def set_categoryGroup(self, categoryGroup): self.categoryGroup = categoryGroup
    def add_categoryGroup(self, value): self.categoryGroup.append(value)
    def insert_categoryGroup_at(self, index, value): self.categoryGroup.insert(index, value)
    def replace_categoryGroup_at(self, index, value): self.categoryGroup[index] = value
    def get_operation(self): return self.operation
    def set_operation(self, operation): self.operation = operation
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_operation(self, value):
        # Validate type operation, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['onlyOne', 'oneOrMore', 'all']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on operation' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.categoryGroup
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='optionalCategoryGroup', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('optionalCategoryGroup')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='optionalCategoryGroup')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='optionalCategoryGroup', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='optionalCategoryGroup'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.operation is not None and 'operation' not in already_processed:
            already_processed.add('operation')
            outfile.write(' operation=%s' % (quote_attrib(self.operation), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='optionalCategoryGroup', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for categoryGroup_ in self.categoryGroup:
            categoryGroup_.export(outfile, level, namespaceprefix_, name_='categoryGroup', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operation', node)
        if value is not None and 'operation' not in already_processed:
            already_processed.add('operation')
            self.operation = value
            self.validate_operation(self.operation)    # validate type operation
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'categoryGroup':
            obj_ = optionalCategoryData.factory()
            obj_.build(child_)
            self.categoryGroup.append(obj_)
            obj_.original_tagname_ = 'categoryGroup'
# end class optionalCategoryGroup


class updateInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, updateInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if updateInfo.subclass:
            return updateInfo.subclass(*args_, **kwargs_)
        else:
            return updateInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='updateInfo', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('updateInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='updateInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='updateInfo', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='updateInfo'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='updateInfo', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class updateInfo


class equivalentClassification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, policyRef=None, lacv=None, applied=None):
        self.original_tagname_ = None
        self.policyRef = _cast(None, policyRef)
        self.lacv = _cast(int, lacv)
        self.applied = _cast(None, applied)
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, equivalentClassification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if equivalentClassification.subclass:
            return equivalentClassification.subclass(*args_, **kwargs_)
        else:
            return equivalentClassification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_policyRef(self): return self.policyRef
    def set_policyRef(self, policyRef): self.policyRef = policyRef
    def get_lacv(self): return self.lacv
    def set_lacv(self, lacv): self.lacv = lacv
    def get_applied(self): return self.applied
    def set_applied(self, applied): self.applied = applied
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_policyName(self, value):
        # Validate type policyName, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 256:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on policyName' % {"value" : value.encode("utf-8")} )
    def validate_lacvInt(self, value):
        # Validate type lacvInt, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_applied(self, value):
        # Validate type applied, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['encrypt', 'decrypt', 'both']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on applied' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='equivalentClassification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('equivalentClassification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='equivalentClassification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='equivalentClassification', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='equivalentClassification'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.policyRef is not None and 'policyRef' not in already_processed:
            already_processed.add('policyRef')
            outfile.write(' policyRef=%s' % (quote_attrib(self.policyRef), ))
        if self.lacv is not None and 'lacv' not in already_processed:
            already_processed.add('lacv')
            outfile.write(' lacv=%s' % (quote_attrib(self.lacv), ))
        if self.applied is not None and 'applied' not in already_processed:
            already_processed.add('applied')
            outfile.write(' applied=%s' % (quote_attrib(self.applied), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='equivalentClassification', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('policyRef', node)
        if value is not None and 'policyRef' not in already_processed:
            already_processed.add('policyRef')
            self.policyRef = value
            self.validate_policyName(self.policyRef)    # validate type policyName
        value = find_attr_value_('lacv', node)
        if value is not None and 'lacv' not in already_processed:
            already_processed.add('lacv')
            try:
                self.lacv = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_lacvInt(self.lacv)    # validate type lacvInt
        value = find_attr_value_('applied', node)
        if value is not None and 'applied' not in already_processed:
            already_processed.add('applied')
            self.applied = value
            self.validate_applied(self.applied)    # validate type applied
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class equivalentClassification


class equivalentPolicy(GeneratedsSuper):
    """Consolidates all equivalent policies in the SPIF"""
    subclass = None
    superclass = None
    def __init__(self, name=None, id=None, userRefURI=None, docRefURI=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.id = _cast(None, id)
        self.userRefURI = _cast(None, userRefURI)
        self.docRefURI = _cast(None, docRefURI)
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, equivalentPolicy)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if equivalentPolicy.subclass:
            return equivalentPolicy.subclass(*args_, **kwargs_)
        else:
            return equivalentPolicy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_userRefURI(self): return self.userRefURI
    def set_userRefURI(self, userRefURI): self.userRefURI = userRefURI
    def get_docRefURI(self): return self.docRefURI
    def set_docRefURI(self, docRefURI): self.docRefURI = docRefURI
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_policyName(self, value):
        # Validate type policyName, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 256:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on policyName' % {"value" : value.encode("utf-8")} )
    def validate_oid(self, value):
        # Validate type oid, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_oid_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_oid_patterns_, ))
    validate_oid_patterns_ = [[u'^[0-2]\\.[0-9\\.]+$']]
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='equivalentPolicy', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('equivalentPolicy')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='equivalentPolicy')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='equivalentPolicy', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='equivalentPolicy'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
        if self.userRefURI is not None and 'userRefURI' not in already_processed:
            already_processed.add('userRefURI')
            outfile.write(' userRefURI=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.userRefURI), input_name='userRefURI')), ))
        if self.docRefURI is not None and 'docRefURI' not in already_processed:
            already_processed.add('docRefURI')
            outfile.write(' docRefURI=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.docRefURI), input_name='docRefURI')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='equivalentPolicy', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_policyName(self.name)    # validate type policyName
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
            self.validate_oid(self.id)    # validate type oid
        value = find_attr_value_('userRefURI', node)
        if value is not None and 'userRefURI' not in already_processed:
            already_processed.add('userRefURI')
            self.userRefURI = value
        value = find_attr_value_('docRefURI', node)
        if value is not None and 'docRefURI' not in already_processed:
            already_processed.add('docRefURI')
            self.docRefURI = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class equivalentPolicy


class equivalentPolicies(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, equivalentPolicy=None):
        self.original_tagname_ = None
        if equivalentPolicy is None:
            self.equivalentPolicy = []
        else:
            self.equivalentPolicy = equivalentPolicy
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, equivalentPolicies)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if equivalentPolicies.subclass:
            return equivalentPolicies.subclass(*args_, **kwargs_)
        else:
            return equivalentPolicies(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_equivalentPolicy(self): return self.equivalentPolicy
    def set_equivalentPolicy(self, equivalentPolicy): self.equivalentPolicy = equivalentPolicy
    def add_equivalentPolicy(self, value): self.equivalentPolicy.append(value)
    def insert_equivalentPolicy_at(self, index, value): self.equivalentPolicy.insert(index, value)
    def replace_equivalentPolicy_at(self, index, value): self.equivalentPolicy[index] = value
    def hasContent_(self):
        if (
            self.equivalentPolicy
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='equivalentPolicies', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('equivalentPolicies')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='equivalentPolicies')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='equivalentPolicies', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='equivalentPolicies'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='equivalentPolicies', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for equivalentPolicy_ in self.equivalentPolicy:
            equivalentPolicy_.export(outfile, level, namespaceprefix_, name_='equivalentPolicy', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'equivalentPolicy':
            obj_ = equivalentPolicy.factory()
            obj_.build(child_)
            self.equivalentPolicy.append(obj_)
            obj_.original_tagname_ = 'equivalentPolicy'
# end class equivalentPolicies


class privacyMark(GeneratedsSuper):
    """A privacy mark that may be used in the label."""
    subclass = None
    superclass = None
    def __init__(self, name=None, obsolete=False):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.obsolete = _cast(bool, obsolete)
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, privacyMark)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if privacyMark.subclass:
            return privacyMark.subclass(*args_, **kwargs_)
        else:
            return privacyMark(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_obsolete(self): return self.obsolete
    def set_obsolete(self, obsolete): self.obsolete = obsolete
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='privacyMark', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('privacyMark')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='privacyMark')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='privacyMark', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='privacyMark'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.obsolete and 'obsolete' not in already_processed:
            already_processed.add('obsolete')
            outfile.write(' obsolete="%s"' % self.gds_format_boolean(self.obsolete, input_name='obsolete'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='privacyMark', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('obsolete', node)
        if value is not None and 'obsolete' not in already_processed:
            already_processed.add('obsolete')
            if value in ('true', '1'):
                self.obsolete = True
            elif value in ('false', '0'):
                self.obsolete = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class privacyMark


class privacyMarks(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, privacyMark=None):
        self.original_tagname_ = None
        if privacyMark is None:
            self.privacyMark = []
        else:
            self.privacyMark = privacyMark
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, privacyMarks)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if privacyMarks.subclass:
            return privacyMarks.subclass(*args_, **kwargs_)
        else:
            return privacyMarks(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_privacyMark(self): return self.privacyMark
    def set_privacyMark(self, privacyMark): self.privacyMark = privacyMark
    def add_privacyMark(self, value): self.privacyMark.append(value)
    def insert_privacyMark_at(self, index, value): self.privacyMark.insert(index, value)
    def replace_privacyMark_at(self, index, value): self.privacyMark[index] = value
    def hasContent_(self):
        if (
            self.privacyMark
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='privacyMarks', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('privacyMarks')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='privacyMarks')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='privacyMarks', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='privacyMarks'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='privacyMarks', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for privacyMark_ in self.privacyMark:
            privacyMark_.export(outfile, level, namespaceprefix_, name_='privacyMark', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'privacyMark':
            obj_ = privacyMark.factory()
            obj_.build(child_)
            self.privacyMark.append(obj_)
            obj_.original_tagname_ = 'privacyMark'
# end class privacyMarks


class markingData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, phrase=None, code=None):
        self.original_tagname_ = None
        self.phrase = _cast(None, phrase)
        if code is None:
            self.code = []
        else:
            self.code = code
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, markingData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if markingData.subclass:
            return markingData.subclass(*args_, **kwargs_)
        else:
            return markingData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_code(self): return self.code
    def set_code(self, code): self.code = code
    def add_code(self, value): self.code.append(value)
    def insert_code_at(self, index, value): self.code.insert(index, value)
    def replace_code_at(self, index, value): self.code[index] = value
    def get_phrase(self): return self.phrase
    def set_phrase(self, phrase): self.phrase = phrase
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_markingPhrase(self, value):
        # Validate type markingPhrase, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 256:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on markingPhrase' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.code
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='markingData', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('markingData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='markingData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='markingData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='markingData'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.phrase is not None and 'phrase' not in already_processed:
            already_processed.add('phrase')
            outfile.write(' phrase=%s' % (quote_attrib(self.phrase), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='markingData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for code_ in self.code:
            showIndent(outfile, level, pretty_print)
            outfile.write('<code>%s</code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(code_), input_name='code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('phrase', node)
        if value is not None and 'phrase' not in already_processed:
            already_processed.add('phrase')
            self.phrase = value
            self.validate_markingPhrase(self.phrase)    # validate type markingPhrase
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'code':
            code_ = child_.text
            code_ = self.gds_validate_string(code_, node, 'code')
            self.code.append(code_)
# end class markingData


class securityClassification(GeneratedsSuper):
    """Security Classification"""
    subclass = None
    superclass = None
    def __init__(self, name=None, color=None, lacv=None, hierarchy=None, obsolete=False, equivalentClassification=None, markingData=None, requiredCategory=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.color = _cast(None, color)
        self.lacv = _cast(int, lacv)
        self.hierarchy = _cast(int, hierarchy)
        self.obsolete = _cast(bool, obsolete)
        if equivalentClassification is None:
            self.equivalentClassification = []
        else:
            self.equivalentClassification = equivalentClassification
        if markingData is None:
            self.markingData = []
        else:
            self.markingData = markingData
        if requiredCategory is None:
            self.requiredCategory = []
        else:
            self.requiredCategory = requiredCategory
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, securityClassification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if securityClassification.subclass:
            return securityClassification.subclass(*args_, **kwargs_)
        else:
            return securityClassification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_equivalentClassification(self): return self.equivalentClassification
    def set_equivalentClassification(self, equivalentClassification): self.equivalentClassification = equivalentClassification
    def add_equivalentClassification(self, value): self.equivalentClassification.append(value)
    def insert_equivalentClassification_at(self, index, value): self.equivalentClassification.insert(index, value)
    def replace_equivalentClassification_at(self, index, value): self.equivalentClassification[index] = value
    def get_markingData(self): return self.markingData
    def set_markingData(self, markingData): self.markingData = markingData
    def add_markingData(self, value): self.markingData.append(value)
    def insert_markingData_at(self, index, value): self.markingData.insert(index, value)
    def replace_markingData_at(self, index, value): self.markingData[index] = value
    def get_requiredCategory(self): return self.requiredCategory
    def set_requiredCategory(self, requiredCategory): self.requiredCategory = requiredCategory
    def add_requiredCategory(self, value): self.requiredCategory.append(value)
    def insert_requiredCategory_at(self, index, value): self.requiredCategory.insert(index, value)
    def replace_requiredCategory_at(self, index, value): self.requiredCategory[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_color(self): return self.color
    def set_color(self, color): self.color = color
    def get_lacv(self): return self.lacv
    def set_lacv(self, lacv): self.lacv = lacv
    def get_hierarchy(self): return self.hierarchy
    def set_hierarchy(self, hierarchy): self.hierarchy = hierarchy
    def get_obsolete(self): return self.obsolete
    def set_obsolete(self, obsolete): self.obsolete = obsolete
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_className(self, value):
        # Validate type className, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 256:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on className' % {"value" : value.encode("utf-8")} )
    def validate_color(self, value):
        # Validate type color, a restriction on None.
        pass
    def validate_lacvInt(self, value):
        # Validate type lacvInt, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_hierarchy(self, value):
        # Validate type hierarchy, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.equivalentClassification or
            self.markingData or
            self.requiredCategory
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='securityClassification', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('securityClassification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='securityClassification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='securityClassification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='securityClassification'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.color is not None and 'color' not in already_processed:
            already_processed.add('color')
            outfile.write(' color=%s' % (quote_attrib(self.color), ))
        if self.lacv is not None and 'lacv' not in already_processed:
            already_processed.add('lacv')
            outfile.write(' lacv=%s' % (quote_attrib(self.lacv), ))
        if self.hierarchy is not None and 'hierarchy' not in already_processed:
            already_processed.add('hierarchy')
            outfile.write(' hierarchy=%s' % (quote_attrib(self.hierarchy), ))
        if self.obsolete and 'obsolete' not in already_processed:
            already_processed.add('obsolete')
            outfile.write(' obsolete="%s"' % self.gds_format_boolean(self.obsolete, input_name='obsolete'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='securityClassification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for equivalentClassification_ in self.equivalentClassification:
            equivalentClassification_.export(outfile, level, namespaceprefix_, name_='equivalentClassification', pretty_print=pretty_print)
        for markingData_ in self.markingData:
            markingData_.export(outfile, level, namespaceprefix_, name_='markingData', pretty_print=pretty_print)
        for requiredCategory_ in self.requiredCategory:
            requiredCategory_.export(outfile, level, namespaceprefix_, name_='requiredCategory', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_className(self.name)    # validate type className
        value = find_attr_value_('color', node)
        if value is not None and 'color' not in already_processed:
            already_processed.add('color')
            self.color = value
            self.validate_color(self.color)    # validate type color
        value = find_attr_value_('lacv', node)
        if value is not None and 'lacv' not in already_processed:
            already_processed.add('lacv')
            try:
                self.lacv = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_lacvInt(self.lacv)    # validate type lacvInt
        value = find_attr_value_('hierarchy', node)
        if value is not None and 'hierarchy' not in already_processed:
            already_processed.add('hierarchy')
            try:
                self.hierarchy = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_hierarchy(self.hierarchy)    # validate type hierarchy
        value = find_attr_value_('obsolete', node)
        if value is not None and 'obsolete' not in already_processed:
            already_processed.add('obsolete')
            if value in ('true', '1'):
                self.obsolete = True
            elif value in ('false', '0'):
                self.obsolete = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'equivalentClassification':
            obj_ = equivalentClassification.factory()
            obj_.build(child_)
            self.equivalentClassification.append(obj_)
            obj_.original_tagname_ = 'equivalentClassification'
        elif nodeName_ == 'markingData':
            obj_ = markingData.factory()
            obj_.build(child_)
            self.markingData.append(obj_)
            obj_.original_tagname_ = 'markingData'
        elif nodeName_ == 'requiredCategory':
            obj_ = optionalCategoryGroup.factory()
            obj_.build(child_)
            self.requiredCategory.append(obj_)
            obj_.original_tagname_ = 'requiredCategory'
# end class securityClassification


class securityClassifications(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, securityClassification=None):
        self.original_tagname_ = None
        if securityClassification is None:
            self.securityClassification = []
        else:
            self.securityClassification = securityClassification
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, securityClassifications)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if securityClassifications.subclass:
            return securityClassifications.subclass(*args_, **kwargs_)
        else:
            return securityClassifications(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_securityClassification(self): return self.securityClassification
    def set_securityClassification(self, securityClassification): self.securityClassification = securityClassification
    def add_securityClassification(self, value): self.securityClassification.append(value)
    def insert_securityClassification_at(self, index, value): self.securityClassification.insert(index, value)
    def replace_securityClassification_at(self, index, value): self.securityClassification[index] = value
    def hasContent_(self):
        if (
            self.securityClassification
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='securityClassifications', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('securityClassifications')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='securityClassifications')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='securityClassifications', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='securityClassifications'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='securityClassifications', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for securityClassification_ in self.securityClassification:
            securityClassification_.export(outfile, level, namespaceprefix_, name_='securityClassification', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'securityClassification':
            obj_ = securityClassification.factory()
            obj_.build(child_)
            self.securityClassification.append(obj_)
            obj_.original_tagname_ = 'securityClassification'
# end class securityClassifications


class equivalentSecCategoryTag(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, policyRef=None, tagSetId=None, tagType=None, enumType=None, lacv=None, applied=None):
        self.original_tagname_ = None
        self.policyRef = _cast(None, policyRef)
        self.tagSetId = _cast(None, tagSetId)
        self.tagType = _cast(None, tagType)
        self.enumType = _cast(None, enumType)
        self.lacv = _cast(None, lacv)
        self.applied = _cast(None, applied)
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, equivalentSecCategoryTag)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if equivalentSecCategoryTag.subclass:
            return equivalentSecCategoryTag.subclass(*args_, **kwargs_)
        else:
            return equivalentSecCategoryTag(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_policyRef(self): return self.policyRef
    def set_policyRef(self, policyRef): self.policyRef = policyRef
    def get_tagSetId(self): return self.tagSetId
    def set_tagSetId(self, tagSetId): self.tagSetId = tagSetId
    def get_tagType(self): return self.tagType
    def set_tagType(self, tagType): self.tagType = tagType
    def get_enumType(self): return self.enumType
    def set_enumType(self, enumType): self.enumType = enumType
    def get_lacv(self): return self.lacv
    def set_lacv(self, lacv): self.lacv = lacv
    def get_applied(self): return self.applied
    def set_applied(self, applied): self.applied = applied
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_policyName(self, value):
        # Validate type policyName, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 256:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on policyName' % {"value" : value.encode("utf-8")} )
    def validate_oid(self, value):
        # Validate type oid, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_oid_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_oid_patterns_, ))
    validate_oid_patterns_ = [[u'^[0-2]\\.[0-9\\.]+$']]
    def validate_tagType(self, value):
        # Validate type tagType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['notApplicable', 'restrictive', 'enumerated', 'permissive', 'tagType7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tagType' % {"value" : value.encode("utf-8")} )
    def validate_enumType(self, value):
        # Validate type enumType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['restrictive', 'permissive']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on enumType' % {"value" : value.encode("utf-8")} )
    def validate_lacv(self, value):
        # Validate type lacv, a restriction on None.
        pass
    def validate_applied(self, value):
        # Validate type applied, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['encrypt', 'decrypt', 'both']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on applied' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='equivalentSecCategoryTag', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('equivalentSecCategoryTag')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='equivalentSecCategoryTag')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='equivalentSecCategoryTag', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='equivalentSecCategoryTag'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.policyRef is not None and 'policyRef' not in already_processed:
            already_processed.add('policyRef')
            outfile.write(' policyRef=%s' % (quote_attrib(self.policyRef), ))
        if self.tagSetId is not None and 'tagSetId' not in already_processed:
            already_processed.add('tagSetId')
            outfile.write(' tagSetId=%s' % (quote_attrib(self.tagSetId), ))
        if self.tagType is not None and 'tagType' not in already_processed:
            already_processed.add('tagType')
            outfile.write(' tagType=%s' % (quote_attrib(self.tagType), ))
        if self.enumType is not None and 'enumType' not in already_processed:
            already_processed.add('enumType')
            outfile.write(' enumType=%s' % (quote_attrib(self.enumType), ))
        if self.lacv is not None and 'lacv' not in already_processed:
            already_processed.add('lacv')
            outfile.write(' lacv=%s' % (quote_attrib(self.lacv), ))
        if self.applied is not None and 'applied' not in already_processed:
            already_processed.add('applied')
            outfile.write(' applied=%s' % (quote_attrib(self.applied), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='equivalentSecCategoryTag', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('policyRef', node)
        if value is not None and 'policyRef' not in already_processed:
            already_processed.add('policyRef')
            self.policyRef = value
            self.validate_policyName(self.policyRef)    # validate type policyName
        value = find_attr_value_('tagSetId', node)
        if value is not None and 'tagSetId' not in already_processed:
            already_processed.add('tagSetId')
            self.tagSetId = value
            self.validate_oid(self.tagSetId)    # validate type oid
        value = find_attr_value_('tagType', node)
        if value is not None and 'tagType' not in already_processed:
            already_processed.add('tagType')
            self.tagType = value
            self.validate_tagType(self.tagType)    # validate type tagType
        value = find_attr_value_('enumType', node)
        if value is not None and 'enumType' not in already_processed:
            already_processed.add('enumType')
            self.enumType = value
            self.validate_enumType(self.enumType)    # validate type enumType
        value = find_attr_value_('lacv', node)
        if value is not None and 'lacv' not in already_processed:
            already_processed.add('lacv')
            self.lacv = value
            self.validate_lacv(self.lacv)    # validate type lacv
        value = find_attr_value_('applied', node)
        if value is not None and 'applied' not in already_processed:
            already_processed.add('applied')
            self.applied = value
            self.validate_applied(self.applied)    # validate type applied
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class equivalentSecCategoryTag


class tagCategory(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, lacv=None, userInput=None, requiredClass=None, obsolete=False, equivalentSecCategoryTag=None, markingData=None, excludedClass=None, requiredCategory=None, excludedCategory=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.lacv = _cast(None, lacv)
        self.userInput = _cast(None, userInput)
        self.requiredClass = _cast(None, requiredClass)
        self.obsolete = _cast(bool, obsolete)
        if equivalentSecCategoryTag is None:
            self.equivalentSecCategoryTag = []
        else:
            self.equivalentSecCategoryTag = equivalentSecCategoryTag
        if markingData is None:
            self.markingData = []
        else:
            self.markingData = markingData
        if excludedClass is None:
            self.excludedClass = []
        else:
            self.excludedClass = excludedClass
        if requiredCategory is None:
            self.requiredCategory = []
        else:
            self.requiredCategory = requiredCategory
        if excludedCategory is None:
            self.excludedCategory = []
        else:
            self.excludedCategory = excludedCategory
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tagCategory)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tagCategory.subclass:
            return tagCategory.subclass(*args_, **kwargs_)
        else:
            return tagCategory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_equivalentSecCategoryTag(self): return self.equivalentSecCategoryTag
    def set_equivalentSecCategoryTag(self, equivalentSecCategoryTag): self.equivalentSecCategoryTag = equivalentSecCategoryTag
    def add_equivalentSecCategoryTag(self, value): self.equivalentSecCategoryTag.append(value)
    def insert_equivalentSecCategoryTag_at(self, index, value): self.equivalentSecCategoryTag.insert(index, value)
    def replace_equivalentSecCategoryTag_at(self, index, value): self.equivalentSecCategoryTag[index] = value
    def get_markingData(self): return self.markingData
    def set_markingData(self, markingData): self.markingData = markingData
    def add_markingData(self, value): self.markingData.append(value)
    def insert_markingData_at(self, index, value): self.markingData.insert(index, value)
    def replace_markingData_at(self, index, value): self.markingData[index] = value
    def get_excludedClass(self): return self.excludedClass
    def set_excludedClass(self, excludedClass): self.excludedClass = excludedClass
    def add_excludedClass(self, value): self.excludedClass.append(value)
    def insert_excludedClass_at(self, index, value): self.excludedClass.insert(index, value)
    def replace_excludedClass_at(self, index, value): self.excludedClass[index] = value
    def get_requiredCategory(self): return self.requiredCategory
    def set_requiredCategory(self, requiredCategory): self.requiredCategory = requiredCategory
    def add_requiredCategory(self, value): self.requiredCategory.append(value)
    def insert_requiredCategory_at(self, index, value): self.requiredCategory.insert(index, value)
    def replace_requiredCategory_at(self, index, value): self.requiredCategory[index] = value
    def get_excludedCategory(self): return self.excludedCategory
    def set_excludedCategory(self, excludedCategory): self.excludedCategory = excludedCategory
    def add_excludedCategory(self, value): self.excludedCategory.append(value)
    def insert_excludedCategory_at(self, index, value): self.excludedCategory.insert(index, value)
    def replace_excludedCategory_at(self, index, value): self.excludedCategory[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_lacv(self): return self.lacv
    def set_lacv(self, lacv): self.lacv = lacv
    def get_userInput(self): return self.userInput
    def set_userInput(self, userInput): self.userInput = userInput
    def get_requiredClass(self): return self.requiredClass
    def set_requiredClass(self, requiredClass): self.requiredClass = requiredClass
    def get_obsolete(self): return self.obsolete
    def set_obsolete(self, obsolete): self.obsolete = obsolete
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_lacv(self, value):
        # Validate type lacv, a restriction on None.
        pass
    def validate_userInput(self, value):
        # Validate type userInput, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['string', 'integer', 'date']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on userInput' % {"value" : value.encode("utf-8")} )
    def validate_className(self, value):
        # Validate type className, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 256:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on className' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.equivalentSecCategoryTag or
            self.markingData or
            self.excludedClass or
            self.requiredCategory or
            self.excludedCategory
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='tagCategory', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tagCategory')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tagCategory')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='tagCategory', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tagCategory'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.lacv is not None and 'lacv' not in already_processed:
            already_processed.add('lacv')
            outfile.write(' lacv=%s' % (quote_attrib(self.lacv), ))
        if self.userInput is not None and 'userInput' not in already_processed:
            already_processed.add('userInput')
            outfile.write(' userInput=%s' % (quote_attrib(self.userInput), ))
        if self.requiredClass is not None and 'requiredClass' not in already_processed:
            already_processed.add('requiredClass')
            outfile.write(' requiredClass=%s' % (quote_attrib(self.requiredClass), ))
        if self.obsolete and 'obsolete' not in already_processed:
            already_processed.add('obsolete')
            outfile.write(' obsolete="%s"' % self.gds_format_boolean(self.obsolete, input_name='obsolete'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='tagCategory', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for equivalentSecCategoryTag_ in self.equivalentSecCategoryTag:
            equivalentSecCategoryTag_.export(outfile, level, namespaceprefix_, name_='equivalentSecCategoryTag', pretty_print=pretty_print)
        for markingData_ in self.markingData:
            markingData_.export(outfile, level, namespaceprefix_, name_='markingData', pretty_print=pretty_print)
        for excludedClass_ in self.excludedClass:
            showIndent(outfile, level, pretty_print)
            outfile.write('<excludedClass>%s</excludedClass>%s' % (self.gds_encode(self.gds_format_string(quote_xml(excludedClass_), input_name='excludedClass')), eol_))
        for requiredCategory_ in self.requiredCategory:
            requiredCategory_.export(outfile, level, namespaceprefix_, name_='requiredCategory', pretty_print=pretty_print)
        for excludedCategory_ in self.excludedCategory:
            excludedCategory_.export(outfile, level, namespaceprefix_, name_='excludedCategory', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('lacv', node)
        if value is not None and 'lacv' not in already_processed:
            already_processed.add('lacv')
            self.lacv = value
            self.validate_lacv(self.lacv)    # validate type lacv
        value = find_attr_value_('userInput', node)
        if value is not None and 'userInput' not in already_processed:
            already_processed.add('userInput')
            self.userInput = value
            self.validate_userInput(self.userInput)    # validate type userInput
        value = find_attr_value_('requiredClass', node)
        if value is not None and 'requiredClass' not in already_processed:
            already_processed.add('requiredClass')
            self.requiredClass = value
            self.validate_className(self.requiredClass)    # validate type className
        value = find_attr_value_('obsolete', node)
        if value is not None and 'obsolete' not in already_processed:
            already_processed.add('obsolete')
            if value in ('true', '1'):
                self.obsolete = True
            elif value in ('false', '0'):
                self.obsolete = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'equivalentSecCategoryTag':
            obj_ = equivalentSecCategoryTag.factory()
            obj_.build(child_)
            self.equivalentSecCategoryTag.append(obj_)
            obj_.original_tagname_ = 'equivalentSecCategoryTag'
        elif nodeName_ == 'markingData':
            obj_ = markingData.factory()
            obj_.build(child_)
            self.markingData.append(obj_)
            obj_.original_tagname_ = 'markingData'
        elif nodeName_ == 'excludedClass':
            excludedClass_ = child_.text
            excludedClass_ = self.gds_validate_string(excludedClass_, node, 'excludedClass')
            self.excludedClass.append(excludedClass_)
        elif nodeName_ == 'requiredCategory':
            obj_ = optionalCategoryGroup.factory()
            obj_.build(child_)
            self.requiredCategory.append(obj_)
            obj_.original_tagname_ = 'requiredCategory'
        elif nodeName_ == 'excludedCategory':
            obj_ = optionalCategoryData.factory()
            obj_.build(child_)
            self.excludedCategory.append(obj_)
            obj_.original_tagname_ = 'excludedCategory'
# end class tagCategory


class qualifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, markingQualifier=None, qualifierCode=None):
        self.original_tagname_ = None
        self.markingQualifier = _cast(None, markingQualifier)
        self.qualifierCode = _cast(None, qualifierCode)
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, qualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if qualifier.subclass:
            return qualifier.subclass(*args_, **kwargs_)
        else:
            return qualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_markingQualifier(self): return self.markingQualifier
    def set_markingQualifier(self, markingQualifier): self.markingQualifier = markingQualifier
    def get_qualifierCode(self): return self.qualifierCode
    def set_qualifierCode(self, qualifierCode): self.qualifierCode = qualifierCode
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_markingPhrase(self, value):
        # Validate type markingPhrase, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 256:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on markingPhrase' % {"value" : value.encode("utf-8")} )
    def validate_qualifierCode(self, value):
        # Validate type qualifierCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['prefix', 'suffix', 'separator']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on qualifierCode' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='qualifier', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('qualifier')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='qualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='qualifier', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='qualifier'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.markingQualifier is not None and 'markingQualifier' not in already_processed:
            already_processed.add('markingQualifier')
            outfile.write(' markingQualifier=%s' % (quote_attrib(self.markingQualifier), ))
        if self.qualifierCode is not None and 'qualifierCode' not in already_processed:
            already_processed.add('qualifierCode')
            outfile.write(' qualifierCode=%s' % (quote_attrib(self.qualifierCode), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='qualifier', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('markingQualifier', node)
        if value is not None and 'markingQualifier' not in already_processed:
            already_processed.add('markingQualifier')
            self.markingQualifier = value
            self.validate_markingPhrase(self.markingQualifier)    # validate type markingPhrase
        value = find_attr_value_('qualifierCode', node)
        if value is not None and 'qualifierCode' not in already_processed:
            already_processed.add('qualifierCode')
            self.qualifierCode = value
            self.validate_qualifierCode(self.qualifierCode)    # validate type qualifierCode
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class qualifier


class markingQualifier(GeneratedsSuper):
    """Allows the display of the marking phrase at a specific location."""
    subclass = None
    superclass = None
    def __init__(self, markingCode=None, qualifier=None):
        self.original_tagname_ = None
        self.markingCode = _cast(None, markingCode)
        if qualifier is None:
            self.qualifier = []
        else:
            self.qualifier = qualifier
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, markingQualifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if markingQualifier.subclass:
            return markingQualifier.subclass(*args_, **kwargs_)
        else:
            return markingQualifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_qualifier(self): return self.qualifier
    def set_qualifier(self, qualifier): self.qualifier = qualifier
    def add_qualifier(self, value): self.qualifier.append(value)
    def insert_qualifier_at(self, index, value): self.qualifier.insert(index, value)
    def replace_qualifier_at(self, index, value): self.qualifier[index] = value
    def get_markingCode(self): return self.markingCode
    def set_markingCode(self, markingCode): self.markingCode = markingCode
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_markingCode(self, value):
        # Validate type markingCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['pageTop', 'pageBottom', 'pageTopBottom', 'documentStart', 'documentEnd', 'noNameDisplay', 'noMarkingDisplay', 'suppressClassName']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on markingCode' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.qualifier
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='markingQualifier', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('markingQualifier')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='markingQualifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='markingQualifier', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='markingQualifier'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.markingCode is not None and 'markingCode' not in already_processed:
            already_processed.add('markingCode')
            outfile.write(' markingCode=%s' % (quote_attrib(self.markingCode), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='markingQualifier', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for qualifier_ in self.qualifier:
            qualifier_.export(outfile, level, namespaceprefix_, name_='qualifier', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('markingCode', node)
        if value is not None and 'markingCode' not in already_processed:
            already_processed.add('markingCode')
            self.markingCode = value
            self.validate_markingCode(self.markingCode)    # validate type markingCode
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'qualifier':
            obj_ = qualifier.factory()
            obj_.build(child_)
            self.qualifier.append(obj_)
            obj_.original_tagname_ = 'qualifier'
# end class markingQualifier


class securityCategoryTag(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, tagType=None, enumType=None, tag7Encoding=None, singleSelection=False, tagCategory=None, markingQualifier=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.tagType = _cast(None, tagType)
        self.enumType = _cast(None, enumType)
        self.tag7Encoding = _cast(None, tag7Encoding)
        self.singleSelection = _cast(bool, singleSelection)
        if tagCategory is None:
            self.tagCategory = []
        else:
            self.tagCategory = tagCategory
        if markingQualifier is None:
            self.markingQualifier = []
        else:
            self.markingQualifier = markingQualifier
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, securityCategoryTag)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if securityCategoryTag.subclass:
            return securityCategoryTag.subclass(*args_, **kwargs_)
        else:
            return securityCategoryTag(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tagCategory(self): return self.tagCategory
    def set_tagCategory(self, tagCategory): self.tagCategory = tagCategory
    def add_tagCategory(self, value): self.tagCategory.append(value)
    def insert_tagCategory_at(self, index, value): self.tagCategory.insert(index, value)
    def replace_tagCategory_at(self, index, value): self.tagCategory[index] = value
    def get_markingQualifier(self): return self.markingQualifier
    def set_markingQualifier(self, markingQualifier): self.markingQualifier = markingQualifier
    def add_markingQualifier(self, value): self.markingQualifier.append(value)
    def insert_markingQualifier_at(self, index, value): self.markingQualifier.insert(index, value)
    def replace_markingQualifier_at(self, index, value): self.markingQualifier[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_tagType(self): return self.tagType
    def set_tagType(self, tagType): self.tagType = tagType
    def get_enumType(self): return self.enumType
    def set_enumType(self, enumType): self.enumType = enumType
    def get_tag7Encoding(self): return self.tag7Encoding
    def set_tag7Encoding(self, tag7Encoding): self.tag7Encoding = tag7Encoding
    def get_singleSelection(self): return self.singleSelection
    def set_singleSelection(self, singleSelection): self.singleSelection = singleSelection
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_tagType(self, value):
        # Validate type tagType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['notApplicable', 'restrictive', 'enumerated', 'permissive', 'tagType7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tagType' % {"value" : value.encode("utf-8")} )
    def validate_enumType(self, value):
        # Validate type enumType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['restrictive', 'permissive']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on enumType' % {"value" : value.encode("utf-8")} )
    def validate_tag7Encoding(self, value):
        # Validate type tag7Encoding, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['bitSetAttributes', 'securityAttributes']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tag7Encoding' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.tagCategory or
            self.markingQualifier
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='securityCategoryTag', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('securityCategoryTag')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='securityCategoryTag')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='securityCategoryTag', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='securityCategoryTag'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.tagType is not None and 'tagType' not in already_processed:
            already_processed.add('tagType')
            outfile.write(' tagType=%s' % (quote_attrib(self.tagType), ))
        if self.enumType is not None and 'enumType' not in already_processed:
            already_processed.add('enumType')
            outfile.write(' enumType=%s' % (quote_attrib(self.enumType), ))
        if self.tag7Encoding is not None and 'tag7Encoding' not in already_processed:
            already_processed.add('tag7Encoding')
            outfile.write(' tag7Encoding=%s' % (quote_attrib(self.tag7Encoding), ))
        if self.singleSelection and 'singleSelection' not in already_processed:
            already_processed.add('singleSelection')
            outfile.write(' singleSelection="%s"' % self.gds_format_boolean(self.singleSelection, input_name='singleSelection'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='securityCategoryTag', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for tagCategory_ in self.tagCategory:
            tagCategory_.export(outfile, level, namespaceprefix_, name_='tagCategory', pretty_print=pretty_print)
        for markingQualifier_ in self.markingQualifier:
            markingQualifier_.export(outfile, level, namespaceprefix_, name_='markingQualifier', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('tagType', node)
        if value is not None and 'tagType' not in already_processed:
            already_processed.add('tagType')
            self.tagType = value
            self.validate_tagType(self.tagType)    # validate type tagType
        value = find_attr_value_('enumType', node)
        if value is not None and 'enumType' not in already_processed:
            already_processed.add('enumType')
            self.enumType = value
            self.validate_enumType(self.enumType)    # validate type enumType
        value = find_attr_value_('tag7Encoding', node)
        if value is not None and 'tag7Encoding' not in already_processed:
            already_processed.add('tag7Encoding')
            self.tag7Encoding = value
            self.validate_tag7Encoding(self.tag7Encoding)    # validate type tag7Encoding
        value = find_attr_value_('singleSelection', node)
        if value is not None and 'singleSelection' not in already_processed:
            already_processed.add('singleSelection')
            if value in ('true', '1'):
                self.singleSelection = True
            elif value in ('false', '0'):
                self.singleSelection = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tagCategory':
            obj_ = tagCategory.factory()
            obj_.build(child_)
            self.tagCategory.append(obj_)
            obj_.original_tagname_ = 'tagCategory'
        elif nodeName_ == 'markingQualifier':
            obj_ = markingQualifier.factory()
            obj_.build(child_)
            self.markingQualifier.append(obj_)
            obj_.original_tagname_ = 'markingQualifier'
# end class securityCategoryTag


class securityCategoryTagSet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, id=None, securityCategoryTag=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.id = _cast(None, id)
        if securityCategoryTag is None:
            self.securityCategoryTag = []
        else:
            self.securityCategoryTag = securityCategoryTag
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, securityCategoryTagSet)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if securityCategoryTagSet.subclass:
            return securityCategoryTagSet.subclass(*args_, **kwargs_)
        else:
            return securityCategoryTagSet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_securityCategoryTag(self): return self.securityCategoryTag
    def set_securityCategoryTag(self, securityCategoryTag): self.securityCategoryTag = securityCategoryTag
    def add_securityCategoryTag(self, value): self.securityCategoryTag.append(value)
    def insert_securityCategoryTag_at(self, index, value): self.securityCategoryTag.insert(index, value)
    def replace_securityCategoryTag_at(self, index, value): self.securityCategoryTag[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_tagSetName(self, value):
        # Validate type tagSetName, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 256:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tagSetName' % {"value" : value.encode("utf-8")} )
    def validate_oid(self, value):
        # Validate type oid, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_oid_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_oid_patterns_, ))
    validate_oid_patterns_ = [[u'^[0-2]\\.[0-9\\.]+$']]
    def hasContent_(self):
        if (
            self.securityCategoryTag
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='securityCategoryTagSet', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('securityCategoryTagSet')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='securityCategoryTagSet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='securityCategoryTagSet', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='securityCategoryTagSet'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='securityCategoryTagSet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for securityCategoryTag_ in self.securityCategoryTag:
            securityCategoryTag_.export(outfile, level, namespaceprefix_, name_='securityCategoryTag', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_tagSetName(self.name)    # validate type tagSetName
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
            self.validate_oid(self.id)    # validate type oid
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'securityCategoryTag':
            obj_ = securityCategoryTag.factory()
            obj_.build(child_)
            self.securityCategoryTag.append(obj_)
            obj_.original_tagname_ = 'securityCategoryTag'
# end class securityCategoryTagSet


class securityCategoryTagSets(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, securityCategoryTagSet=None):
        self.original_tagname_ = None
        if securityCategoryTagSet is None:
            self.securityCategoryTagSet = []
        else:
            self.securityCategoryTagSet = securityCategoryTagSet
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, securityCategoryTagSets)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if securityCategoryTagSets.subclass:
            return securityCategoryTagSets.subclass(*args_, **kwargs_)
        else:
            return securityCategoryTagSets(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_securityCategoryTagSet(self): return self.securityCategoryTagSet
    def set_securityCategoryTagSet(self, securityCategoryTagSet): self.securityCategoryTagSet = securityCategoryTagSet
    def add_securityCategoryTagSet(self, value): self.securityCategoryTagSet.append(value)
    def insert_securityCategoryTagSet_at(self, index, value): self.securityCategoryTagSet.insert(index, value)
    def replace_securityCategoryTagSet_at(self, index, value): self.securityCategoryTagSet[index] = value
    def hasContent_(self):
        if (
            self.securityCategoryTagSet
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='securityCategoryTagSets', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('securityCategoryTagSets')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='securityCategoryTagSets')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='securityCategoryTagSets', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='securityCategoryTagSets'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='securityCategoryTagSets', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for securityCategoryTagSet_ in self.securityCategoryTagSet:
            securityCategoryTagSet_.export(outfile, level, namespaceprefix_, name_='securityCategoryTagSet', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'securityCategoryTagSet':
            obj_ = securityCategoryTagSet.factory()
            obj_.build(child_)
            self.securityCategoryTagSet.append(obj_)
            obj_.original_tagname_ = 'securityCategoryTagSet'
# end class securityCategoryTagSets


class objectIdData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, id=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.id = _cast(None, id)
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, objectIdData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if objectIdData.subclass:
            return objectIdData.subclass(*args_, **kwargs_)
        else:
            return objectIdData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_policyName(self, value):
        # Validate type policyName, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 256:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on policyName' % {"value" : value.encode("utf-8")} )
    def validate_oid(self, value):
        # Validate type oid, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_oid_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_oid_patterns_, ))
    validate_oid_patterns_ = [[u'^[0-2]\\.[0-9\\.]+$']]
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='objectIdData', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('objectIdData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='objectIdData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='objectIdData', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='objectIdData'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='objectIdData', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_policyName(self.name)    # validate type policyName
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
            self.validate_oid(self.id)    # validate type oid
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class objectIdData


class extensions(GeneratedsSuper):
    """A set of vendor-specific extensions"""
    subclass = None
    superclass = None
    def __init__(self, anytypeobjs_=None):
        self.original_tagname_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, extensions)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if extensions.subclass:
            return extensions.subclass(*args_, **kwargs_)
        else:
            return extensions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='extensions', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('extensions')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='extensions')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='extensions', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='extensions'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='extensions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        obj_ = self.gds_build_any(child_, 'extensions')
        if obj_ is not None:
            self.add_anytypeobjs_(obj_)
# end class extensions


class SPIF(GeneratedsSuper):
    """Security Policy Information File"""
    subclass = None
    superclass = None
    def __init__(self, schemaVersion=None, version=1, creationDate=None, originatorDN=None, keyIdentifier=None, privilegeId=None, rbacId=None, userRefURI=None, docRefURI=None, defaultSecurityPolicyId=None, securityPolicyId=None, updateInfo=None, securityClassifications=None, securityCategoryTagSets=None, privacyMarks=None, equivalentPolicies=None, extensions=None):
        self.original_tagname_ = None
        self.schemaVersion = _cast(None, schemaVersion)
        self.version = _cast(int, version)
        self.creationDate = _cast(None, creationDate)
        self.originatorDN = _cast(None, originatorDN)
        self.keyIdentifier = _cast(None, keyIdentifier)
        self.privilegeId = _cast(None, privilegeId)
        self.rbacId = _cast(None, rbacId)
        self.userRefURI = _cast(None, userRefURI)
        self.docRefURI = _cast(None, docRefURI)
        self.defaultSecurityPolicyId = defaultSecurityPolicyId
        self.securityPolicyId = securityPolicyId
        self.updateInfo = updateInfo
        self.securityClassifications = securityClassifications
        self.securityCategoryTagSets = securityCategoryTagSets
        self.privacyMarks = privacyMarks
        self.equivalentPolicies = equivalentPolicies
        self.extensions = extensions
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SPIF)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SPIF.subclass:
            return SPIF.subclass(*args_, **kwargs_)
        else:
            return SPIF(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_defaultSecurityPolicyId(self): return self.defaultSecurityPolicyId
    def set_defaultSecurityPolicyId(self, defaultSecurityPolicyId): self.defaultSecurityPolicyId = defaultSecurityPolicyId
    def get_securityPolicyId(self): return self.securityPolicyId
    def set_securityPolicyId(self, securityPolicyId): self.securityPolicyId = securityPolicyId
    def get_updateInfo(self): return self.updateInfo
    def set_updateInfo(self, updateInfo): self.updateInfo = updateInfo
    def get_securityClassifications(self): return self.securityClassifications
    def set_securityClassifications(self, securityClassifications): self.securityClassifications = securityClassifications
    def get_securityCategoryTagSets(self): return self.securityCategoryTagSets
    def set_securityCategoryTagSets(self, securityCategoryTagSets): self.securityCategoryTagSets = securityCategoryTagSets
    def get_privacyMarks(self): return self.privacyMarks
    def set_privacyMarks(self, privacyMarks): self.privacyMarks = privacyMarks
    def get_equivalentPolicies(self): return self.equivalentPolicies
    def set_equivalentPolicies(self, equivalentPolicies): self.equivalentPolicies = equivalentPolicies
    def get_extensions(self): return self.extensions
    def set_extensions(self, extensions): self.extensions = extensions
    def get_schemaVersion(self): return self.schemaVersion
    def set_schemaVersion(self, schemaVersion): self.schemaVersion = schemaVersion
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_creationDate(self): return self.creationDate
    def set_creationDate(self, creationDate): self.creationDate = creationDate
    def get_originatorDN(self): return self.originatorDN
    def set_originatorDN(self, originatorDN): self.originatorDN = originatorDN
    def get_keyIdentifier(self): return self.keyIdentifier
    def set_keyIdentifier(self, keyIdentifier): self.keyIdentifier = keyIdentifier
    def get_privilegeId(self): return self.privilegeId
    def set_privilegeId(self, privilegeId): self.privilegeId = privilegeId
    def get_rbacId(self): return self.rbacId
    def set_rbacId(self, rbacId): self.rbacId = rbacId
    def get_userRefURI(self): return self.userRefURI
    def set_userRefURI(self, userRefURI): self.userRefURI = userRefURI
    def get_docRefURI(self): return self.docRefURI
    def set_docRefURI(self, docRefURI): self.docRefURI = docRefURI
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def validate_version(self, value):
        # Validate type version, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1.0']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on version' % {"value" : value.encode("utf-8")} )
    def validate_genTime(self, value):
        # Validate type genTime, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_oid(self, value):
        # Validate type oid, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_oid_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_oid_patterns_, ))
    validate_oid_patterns_ = [[u'^[0-2]\\.[0-9\\.]+$']]
    def hasContent_(self):
        if (
            self.defaultSecurityPolicyId is not None or
            self.securityPolicyId is not None or
            self.updateInfo is not None or
            self.securityClassifications is not None or
            self.securityCategoryTagSets is not None or
            self.privacyMarks is not None or
            self.equivalentPolicies is not None or
            self.extensions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='SPIF', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SPIF')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SPIF')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='SPIF', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SPIF'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.schemaVersion is not None and 'schemaVersion' not in already_processed:
            already_processed.add('schemaVersion')
            outfile.write(' schemaVersion=%s' % (quote_attrib(self.schemaVersion), ))
        if self.version != 1 and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version="%s"' % self.gds_format_integer(self.version, input_name='version'))
        if self.creationDate is not None and 'creationDate' not in already_processed:
            already_processed.add('creationDate')
            outfile.write(' creationDate=%s' % (quote_attrib(self.creationDate), ))
        if self.originatorDN is not None and 'originatorDN' not in already_processed:
            already_processed.add('originatorDN')
            outfile.write(' originatorDN=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.originatorDN), input_name='originatorDN')), ))
        if self.keyIdentifier is not None and 'keyIdentifier' not in already_processed:
            already_processed.add('keyIdentifier')
            outfile.write(' keyIdentifier=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.keyIdentifier), input_name='keyIdentifier')), ))
        if self.privilegeId is not None and 'privilegeId' not in already_processed:
            already_processed.add('privilegeId')
            outfile.write(' privilegeId=%s' % (quote_attrib(self.privilegeId), ))
        if self.rbacId is not None and 'rbacId' not in already_processed:
            already_processed.add('rbacId')
            outfile.write(' rbacId=%s' % (quote_attrib(self.rbacId), ))
        if self.userRefURI is not None and 'userRefURI' not in already_processed:
            already_processed.add('userRefURI')
            outfile.write(' userRefURI=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.userRefURI), input_name='userRefURI')), ))
        if self.docRefURI is not None and 'docRefURI' not in already_processed:
            already_processed.add('docRefURI')
            outfile.write(' docRefURI=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.docRefURI), input_name='docRefURI')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='SPIF', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.defaultSecurityPolicyId is not None:
            self.defaultSecurityPolicyId.export(outfile, level, namespaceprefix_, name_='defaultSecurityPolicyId', pretty_print=pretty_print)
        if self.securityPolicyId is not None:
            self.securityPolicyId.export(outfile, level, namespaceprefix_, name_='securityPolicyId', pretty_print=pretty_print)
        if self.updateInfo is not None:
            self.updateInfo.export(outfile, level, namespaceprefix_, name_='updateInfo', pretty_print=pretty_print)
        if self.securityClassifications is not None:
            self.securityClassifications.export(outfile, level, namespaceprefix_, name_='securityClassifications', pretty_print=pretty_print)
        if self.securityCategoryTagSets is not None:
            self.securityCategoryTagSets.export(outfile, level, namespaceprefix_, name_='securityCategoryTagSets', pretty_print=pretty_print)
        if self.privacyMarks is not None:
            self.privacyMarks.export(outfile, level, namespaceprefix_, name_='privacyMarks', pretty_print=pretty_print)
        if self.equivalentPolicies is not None:
            self.equivalentPolicies.export(outfile, level, namespaceprefix_, name_='equivalentPolicies', pretty_print=pretty_print)
        if self.extensions is not None:
            self.extensions.export(outfile, level, namespaceprefix_, name_='extensions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('schemaVersion', node)
        if value is not None and 'schemaVersion' not in already_processed:
            already_processed.add('schemaVersion')
            self.schemaVersion = value
            self.validate_version(self.schemaVersion)    # validate type version
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            try:
                self.version = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('creationDate', node)
        if value is not None and 'creationDate' not in already_processed:
            already_processed.add('creationDate')
            self.creationDate = value
            self.validate_genTime(self.creationDate)    # validate type genTime
        value = find_attr_value_('originatorDN', node)
        if value is not None and 'originatorDN' not in already_processed:
            already_processed.add('originatorDN')
            self.originatorDN = value
        value = find_attr_value_('keyIdentifier', node)
        if value is not None and 'keyIdentifier' not in already_processed:
            already_processed.add('keyIdentifier')
            self.keyIdentifier = value
        value = find_attr_value_('privilegeId', node)
        if value is not None and 'privilegeId' not in already_processed:
            already_processed.add('privilegeId')
            self.privilegeId = value
            self.validate_oid(self.privilegeId)    # validate type oid
        value = find_attr_value_('rbacId', node)
        if value is not None and 'rbacId' not in already_processed:
            already_processed.add('rbacId')
            self.rbacId = value
            self.validate_oid(self.rbacId)    # validate type oid
        value = find_attr_value_('userRefURI', node)
        if value is not None and 'userRefURI' not in already_processed:
            already_processed.add('userRefURI')
            self.userRefURI = value
        value = find_attr_value_('docRefURI', node)
        if value is not None and 'docRefURI' not in already_processed:
            already_processed.add('docRefURI')
            self.docRefURI = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'defaultSecurityPolicyId':
            obj_ = objectIdData.factory()
            obj_.build(child_)
            self.defaultSecurityPolicyId = obj_
            obj_.original_tagname_ = 'defaultSecurityPolicyId'
        elif nodeName_ == 'securityPolicyId':
            obj_ = objectIdData.factory()
            obj_.build(child_)
            self.securityPolicyId = obj_
            obj_.original_tagname_ = 'securityPolicyId'
        elif nodeName_ == 'updateInfo':
            obj_ = updateInfo.factory()
            obj_.build(child_)
            self.updateInfo = obj_
            obj_.original_tagname_ = 'updateInfo'
        elif nodeName_ == 'securityClassifications':
            obj_ = securityClassifications.factory()
            obj_.build(child_)
            self.securityClassifications = obj_
            obj_.original_tagname_ = 'securityClassifications'
        elif nodeName_ == 'securityCategoryTagSets':
            obj_ = securityCategoryTagSets.factory()
            obj_.build(child_)
            self.securityCategoryTagSets = obj_
            obj_.original_tagname_ = 'securityCategoryTagSets'
        elif nodeName_ == 'privacyMarks':
            obj_ = privacyMarks.factory()
            obj_.build(child_)
            self.privacyMarks = obj_
            obj_.original_tagname_ = 'privacyMarks'
        elif nodeName_ == 'equivalentPolicies':
            obj_ = equivalentPolicies.factory()
            obj_.build(child_)
            self.equivalentPolicies = obj_
            obj_.original_tagname_ = 'equivalentPolicies'
        elif nodeName_ == 'extensions':
            obj_ = extensions.factory()
            obj_.build(child_)
            self.extensions = obj_
            obj_.original_tagname_ = 'extensions'
# end class SPIF


GDSClassesMapping = {
    'categoryGroup': optionalCategoryData,
    'defaultSecurityPolicyId': objectIdData,
    'equivalentClassification': equivalentClassification,
    'equivalentPolicies': equivalentPolicies,
    'equivalentPolicy': equivalentPolicy,
    'equivalentSecCategoryTag': equivalentSecCategoryTag,
    'excludedCategory': optionalCategoryData,
    'extensions': extensions,
    'markingData': markingData,
    'markingQualifier': markingQualifier,
    'privacyMark': privacyMark,
    'privacyMarks': privacyMarks,
    'qualifier': qualifier,
    'requiredCategory': optionalCategoryGroup,
    'securityCategoryTag': securityCategoryTag,
    'securityCategoryTagSet': securityCategoryTagSet,
    'securityCategoryTagSets': securityCategoryTagSets,
    'securityClassification': securityClassification,
    'securityClassifications': securityClassifications,
    'securityPolicyId': objectIdData,
    'tagCategory': tagCategory,
    'updateInfo': updateInfo,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from spifDS import *\n\n')
        sys.stdout.write('import spifDS as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "SPIF",
    "equivalentClassification",
    "equivalentPolicies",
    "equivalentPolicy",
    "equivalentSecCategoryTag",
    "extensions",
    "markingData",
    "markingQualifier",
    "objectIdData",
    "optionalCategoryData",
    "optionalCategoryGroup",
    "privacyMark",
    "privacyMarks",
    "qualifier",
    "securityCategoryTag",
    "securityCategoryTagSet",
    "securityCategoryTagSets",
    "securityClassification",
    "securityClassifications",
    "tagCategory",
    "updateInfo"
]
